@startuml
'https://plantuml.com/class-diagram
'https://plantuml.com/color
'https://htmlcolorcodes.com/
'https://forum.plantuml.net/977/change-a-distance-between-classes
'https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-aggregation-vs-composition/
'No, I will not declare the fields has being-> id: int. I will type like it's in the code. It's more readable this way

skinparam nodesep 100
skinparam ranksep 100
'reduces eye strain:
skinparam backgroundcolor Wheat
note "The Console.java is in red because it's our entry point(has\n the method main() \nAnd the classes with a green thick border are the ones\nthat are not instantiated(which work with only static\nmethods and fields(thus, I dont even put the static keyword\non these members on these classes).\nIMO, it's much more readable this way than underlining\neverything just because it's a static member(like in the\ndocumentation) or putting 'static' everywhere that's static\nsince the sheer ammount of static members.\n\nThe LinkedLists in class Main are composed of instances\nfrom the class Food and the enum Nutrients).\nConsole can be viewed as the Controller and Main as\nthe Model and IInputOutput as the View(MVC) " as N1

interface  IInputOutput {
+ int errorCode
+ static void print(String text)
+ static getIntInput()
+ static String getInput()
default void printFormat(String s, String s2)
+void LCD_Display_print(String text)
}


package Console.java <<Rectangle>> #F96D76  {
class Console << final >> #back:lightgreen|lightblue;header:black/white;line.bold:green {
-final String[] cmds
-final String extraInfo
+{static}void main(String[] args)
-void run()
-void printCommands()
-void processConsoleCommand(String input)
+void print(String text)
+void printf(String s, String s2)
+String getInput()
+ @Override LCD_Display_print(String text)
}
IInputOutput <|.. Console : "   Implements\n\n"
}


package Main.java <<Rectangle>> {
class Main #line.bold:green{
+final String commentSymbol
+final String unknownSymbol
+final String foodsFile
+final String mealsFile
-final int ammountOfNutrients
-LinkedList<Food> foods
-LinkedList<Food> meals
-final int ammountOfNutrients
-Food currentSum
}
class Food {
-final String name
-Nutrients[] nutrients
-float[] vals
+Food(String name, Nutrients[] nutrients, float[] values)
+Food(String name, Nutrients[] nutrients, float[] values, int currentISO, String...stores)
+void sortNutrients()
+[getters & setters]()
}
Main o-- Food : Main uses \n class\nFood\n(Aggregation)

Console --> Main #line:red;line.bold : Console(deals with user input) calls functions from Main\nwhich contains and deals with all the user's food data
}

package Nutrients.java <<Rectangle>> {
enum Nutrients {
CALS, CARBS, PRO, FAT, FIB
VA, VC, VE, VK, V1, V2, V3
V5, V6, V9, V12
CALC, IR, MAG, PH, POT, SOD,
ZI, COP, MAN, SEL, O3, O6
-final String fullName
-final char group
-final float dailyValue
+ [getters]()
}


Food *-Nutrients : " Nutrients\nis dependent\n       upon Food(Composition) \n A Nutrient will not exist outside\nof a Food "
}


@enduml